<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459647646795">{:repl-history {:ide [], :local [&quot;(str-int mygean1)&quot; &quot;(loop [x 12]\n  (when (&gt; x 1)\n    (def mygean1\n      (str mygean1 (rand-int 2))\n      )\n    (recur (- x 1))))&quot; &quot;(loop [x 12]\n  (when (&gt; x 1)\n    \n      (str mygean1 (rand-int 2))\n      \n    (recur (- x 1))))&quot; &quot;(def mygean1 \&quot;101010001010101010\&quot;)&quot; &quot;(gen-gean 12)&quot; &quot;mygean1&quot; &quot;(nlogo-send mygean1)&quot; &quot;(def agent1 \&quot;(setup-rabbits1 0.1 blue 123\&quot;)&quot; &quot;(def agent1 \&quot;(setup-rabbits1 0.1 blue 123)\&quot;)&quot; &quot;(def agent1 \&quot;(setup-rabbits1 0.1 red 123)\&quot;)&quot; &quot;(nlogo-send agent1)&quot; &quot;(assoc test-map :key3 3)&quot; &quot;(test-map)&quot; &quot;(def test-map (assoc test-map :key3 3))&quot; &quot;test-map&quot; &quot;(def food [:ice-cream :steak :apple])&quot; &quot;(rand-nth food)&quot; &quot;(rand-nth test-map)&quot; &quot;(rand-int test-map)&quot; &quot;(def test-m {:1 one :2 two :3 three})&quot; &quot;(def test-map {:key1 1 :key2 2})&quot; &quot;(get test-map (rand-nth (keys test-map)))&quot; &quot;(def colour_name\n  {:0000 \&quot;gray\&quot;\n   :0001 \&quot;red\&quot;\n   :0010 \&quot;orange\&quot;\n   :0011 \&quot;brown\&quot;\n   :0100 \&quot;yellow\&quot;\n   :0101 \&quot;green\&quot;\n   :0110 \&quot;lime\&quot;\n   :0111 \&quot;turquoise\&quot;\n   :1000 \&quot;cyan\&quot;\n   :1001 \&quot;sky\&quot;\n   :1010 \&quot;blue\&quot;\n   :1011 \&quot;violet\&quot;\n   :1100 \&quot;magenta\&quot;\n   :1101 \&quot;pink\&quot;\n   :1110 \&quot;black\&quot;\n   :1111 \&quot;white\&quot;\n   })\n&quot; &quot;(rand-nth (vec colour_name))&quot; &quot;agent1&quot; &quot;(rand-nth (vec speed))&quot; &quot;(ns dna.definitions)&quot; &quot;(rest (new-gean-list 3))&quot; &quot;(get geans-list 0)&quot; &quot;(get geans-list 1)&quot; &quot;(rest geans-list)&quot; &quot;(map (rest geans-list) (rest (rest (new-gean-list 4))))&quot; &quot;(rest (rest (new-gean-list 4)))&quot; &quot;(speed :0010)&quot; &quot;(speed (rest (rest (new-gean-list 3))))&quot; &quot;(map println (rest (new-gean-list 3)))&quot; &quot;(map println geans-list)&quot; &quot;(colour_name :0101)&quot; &quot;(map (first geans-list) (rest (rest (new-gean-list 4))))&quot; &quot;(my-fun (first geans-list) (rest (rest (new-gean-list 3))))&quot; &quot;(rest (rest (new-gean-list 3)))&quot; &quot;(speed :0000)&quot; &quot;(my-fun (first geans-list) (rest (new-gean-list 3)))&quot; &quot;(my-fun geans-list (rest (new-gean-list3)))&quot; &quot;(colour :0101)&quot; &quot;(my-fun speed :0001)&quot; &quot;(my-fun geans-list (rest (new-gean-list 3)))&quot; &quot;(my-fun (rest geans-list) (rest (rest (new-gean-list 3))))&quot; &quot;(speed :0001)&quot; &quot;(my-fun (first geans-list) (first (last (new-gean-list 3))))&quot; &quot;(first (last (new-gean-list 3)))&quot; &quot;(last (last (new-gean-list 3)))&quot; &quot;(my-fun (first geans-list) (first (rest (new-gean-list 3))))&quot; &quot;(my-fun speed :1011)&quot; &quot;(translate (new-gean-list 2))&quot; &quot;(new-gean-list 3)&quot; &quot;(my-fun speed :1010)&quot; &quot;(my-fun speed :0010)&quot; &quot;(doall (map my-fun speed (rest (new-gean-list 3))))&quot; &quot;(my-fun speed :0101)&quot; &quot;(doall (map my-fun geans-list y))&quot; &quot;(doall (map my-fun geans-list (rest (new-gean-list 3))))&quot; &quot;(doall (map my-fun (rest (new-gean-list 3)) :1010))&quot; &quot;(doall (map my-fun (rest (new-gean-list 3)) '(speed)))&quot; &quot;(doall (map my-fun (rest (new-gean-list 3)) speed))&quot; &quot;(my-fun (rest (new-gean-list 4)) speed) &quot; &quot;(my-fun (new-gean-list 4) speed) &quot; &quot;(my-fun :0101 speed) &quot; &quot;(doall (map class geans-list))&quot; &quot;(class (first (geans-list)))&quot; &quot;(class (last (geans-list)))&quot; &quot;(doall (map my-fun (rest (new-gean-list 3)) geans-list))&quot; &quot;(geans-list)&quot; &quot;geans-list&quot; &quot;(first geans-list)&quot; &quot;(class speed)&quot; &quot;(class (first geans-list))&quot; &quot;(rtn-speed :1010 speed)&quot; &quot;(rtn-speed (rest (new-gean-list 3)) geans-list)&quot; &quot;(def geans-list1 '(speed colour))&quot; &quot;(rtn-speed (rest (new-gean-list 3)) geans-list1)&quot; &quot;(translate (new-gean-list 3))&quot; &quot;(nlogo-send (translate (new-gean-list 3)))&quot; &quot;(creat-rabbits 30)&quot; &quot;(println (translate (new-gean-list x)))&quot; &quot;(println (translate (new-gean-list 1)))&quot; &quot;(println (translate (new-gean-list 3)))&quot; &quot;(loop [x 10]\n  (when (&gt; x 1)\n    (println x)\n    (recur (- x 2))))&quot; &quot;(crt-rabbits 23)&quot; &quot;(nlogo-send-exec 10)&quot; &quot;(nlogo-send-exec 20)&quot; &quot;(str \&quot;finrepl \&quot; (- 20 1))&quot; &quot;(startup 2225)&quot; &quot;()&quot; &quot;(nlogo-send \&quot;somehting\&quot;)&quot; &quot;(startup 2226)&quot; &quot;(nlogo-send \&quot;hello\&quot;)&quot; &quot;(startup 2222)&quot; &quot;(startup 2223)&quot; &quot;(startup 2224)&quot; &quot;(nlogo-send-exec 50)&quot;], :remote []}}</component>
</project>