<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1460172343755">{:repl-history {:ide [], :local [&quot;(map-list Transfer-Rna [(key-genomes)])&quot; &quot;(class (key-genomes))&quot; &quot;(Transfer-Rna :0101)&quot; &quot;(first (first (first (key-genomes))))&quot; &quot;(reststr test-rnaM)&quot; &quot;(count key-genomes)&quot; &quot;(count (split-genomes))&quot; &quot;[(key-genomes)]&quot; &quot;(second (split-genomes))&quot; &quot;(key-ge\n&quot; &quot;(genomes)&quot; &quot;(first (split-genomes))&quot; &quot;(keyword (first (split-genomes)))&quot; &quot;(first (keyword (first (split-genomes))))&quot; &quot;(keyword \&quot;:0101\&quot;)&quot; &quot;(keyword [\&quot;:0101\&quot;])&quot; &quot;(keyword (flatten [\&quot;:0101\&quot;]))&quot; &quot;(map-list keyword [\&quot;:0101\&quot; \&quot;:1111\&quot;])&quot; &quot;(butfirst \&quot;:0101\&quot;)&quot; &quot;(rest \&quot;:10101\&quot;)&quot; &quot;()&quot; &quot;(count (key-genomes1))&quot; &quot;(map-list rest (rest (rest (split-genomes))))&quot; &quot;(map-list keyword (rest (rest (rest (split-genomes)))))&quot; &quot;(key-genomes2)&quot; &quot;(str (first (first (key-genomes))))&quot; &quot;(rest (rest (str (first (first (key-genomes))))))&quot; &quot;(key (rest (rest (str (first (first (key-genomes)))))))&quot; &quot;(keyword (rest (rest (str (first (first (key-genomes)))))))&quot; &quot;(keyword (str (rest (rest (str (first (first (key-genomes))))))))&quot; &quot;\n(str (first (first (key-genomes))))&quot; &quot;\n(rest (rest (str (first (first (key-genomes))))))&quot; &quot;(rest (str (first (first (key-genomes)))))&quot; &quot;(rest (key-genomes))&quot; &quot;(val-genomes)&quot; &quot;(vector (key-genomes))&quot; &quot;(vector (first (first (key-genomes))))&quot; &quot;(map set (apply map vector (key-genomes)))&quot; &quot;(count (first (apply map vector (key-genomes))))&quot; &quot;(vector (vector (key-genomes)))&quot; &quot;(key-genomes)&quot; &quot;(count (key-genomes))&quot; &quot;(count (first (key-genomes)))&quot; &quot;(count (second (key-genomes)))&quot; &quot;(count (last (key-genomes)))&quot; &quot;(last (key-genomes))&quot; &quot;[(last (key-genomes))]&quot; &quot;(flatten (vector (first (key-genomes))))&quot; &quot;(conj [] (vector (first (key-genomes))))&quot; &quot;(concat [] (first (key-genomes)))&quot; &quot;(conj [] (first (key-genomes)))&quot; &quot;(conj [] (rest (first (key-genomes))))&quot; &quot;(conj [] (vector (rest (first (key-genomes)))))&quot; &quot;(apply map vector (rest (first (key-genomes))))&quot; &quot;(apply map vector (first (key-genomes)))&quot; &quot;(apply map vector (key-genomes))&quot; &quot;(first (key-genomes))&quot; &quot;(apply map [conj []] (first (key-genomes)))&quot; &quot;(doall (vector (key-genomes)))&quot; &quot;(doall (vector (first (key-genomes))))&quot; &quot;(vector (first (key-genomes)))&quot; &quot;(flatten (first (key-genomes)))&quot; &quot;(class (flatten (first (key-genomes))))&quot; &quot;(mapcat identity [(first (key-genomes))])&quot; &quot;(mapcat identity [[(first (key-genomes))]])&quot; &quot;(mapcat vector [[(first (key-genomes))]])&quot; &quot;[(first (first (key-genomes)))]&quot; &quot;(class [(first (first (key-genomes)))])&quot; &quot;(key-genomes1)&quot; &quot;(blabla (doall (key-genomes)))&quot; &quot;(class blabla)&quot; &quot;(mapcat vector [[(first (first (x)))]]))&quot; &quot;(mapcat vector [[(first (first (x)))]])&quot; &quot;(blabla (key-genomes))&quot; &quot;(doall (blabla (key-genomes)))&quot; &quot;(map-list Transfer-Rna (mapcat vector [(first (first (key-genomes)))]))&quot; &quot;(mapcat vector [[(first (first (key-genomes)))]])&quot; &quot;(Transfer-Rna :0000)&quot; &quot;(class :0000)&quot; &quot;(class (first (first (key-genomes))))&quot; &quot;(first (first (key-genomes)))&quot; &quot;(Transfer-Rna (first (first (key-genomes))))&quot; &quot;(let [x (first (first (key-genomes)))]\n  (println (Transfer-Rna x)))&quot; &quot;(let [x (first (first (key-genomes)))]\n  (Transfer-Rna x))&quot; &quot;(let [x (first (first (key-genomes)))]\n  x)&quot; &quot;Transfer-Rna&quot; &quot;(let [x (first (first (key-genomes)))]\n  (class x)\n  )&quot; &quot;(let [x (first (first (key-genomes)))]\n  (class x)\n  (Transfer-Rna x)\n  )&quot; &quot;(let [x (first (first (key-genomes)))]\n  (class x)\n  (println (Transfer-Rna x))\n  )&quot; &quot;(let [x (first (first (key-genomes)))\n      y :0000]\n  (println (class x))\n  (println (class y))\n  (println (Transfer-Rna y))\n  (println (doall (Transfer-Rna x)))\n  )&quot; &quot;(let [x (first (first (key-genomes)))\n      y :0000]\n  (println (class x))\n  (println (class y))\n  (println (Transfer-Rna y))\n  (println (Transfer-Rna x))\n  )&quot; &quot;(let [x (first (first (key-genomes)))\n      y :0000]\n  (println (class x))\n  (println (class y))\n  (println x)\n  (println y)\n  (println (Transfer-Rna y))\n  (println (Transfer-Rna x))\n  )&quot; &quot;(let [x (last (first (key-genomes)))\n      y :0000]\n  (println (class x))\n  (println (class y))\n  (println x)\n  (println y)\n  (println (Transfer-Rna y))\n  (println (Transfer-Rna x))\n  )&quot; &quot;(let [x (last (first (key-genomes)))\n      y :1100]\n  (println (class x))\n  (println (class y))\n  (println x)\n  (println y)\n  (println (Transfer-Rna y))\n  (println (Transfer-Rna x))\n  )&quot; &quot;(class (last (first (key-genomes))))&quot; &quot;(class (first (key-genomes)))&quot; &quot;(last (first (key-genomes)))&quot; &quot;(str (last (first (key-genomes))))&quot; &quot;(class (split-genomes))&quot; &quot;(split-genomes)&quot; &quot;(new-gene 10)&quot;], :remote []}}</component>
</project>