<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1460251545094">{:repl-history {:ide [], :local [&quot;(str (last (first (key-genomes))))&quot; &quot;(class (split-genomes))&quot; &quot;(split-genomes)&quot; &quot;(new-gene 10)&quot; &quot;(gen-gene 11)&quot; &quot;(doall (map gen-gene (rest gene)))&quot; &quot;(gen-gean 10)&quot; &quot;(gen-gean 90)&quot; &quot;(for [x (vec (gene num))\n      y [Transfer-Rna]]\n  (keyByValue x y))&quot; &quot;(gen-gene 10)&quot; &quot;(doall (map gen-gene (rest (new-gean-list 1))))&quot; &quot;(gen-gene 9)&quot; &quot;(gen-gene 100)&quot; &quot;(rest (gen-gene 100))&quot; &quot;(map gen-gene (rest (new-gean-list 1)))&quot; &quot;(rest (new-gean-list))&quot; &quot;(keyByValue 10 Transfer-Rna)&quot; &quot;(Transfer-Rna :1010)&quot; &quot;(map list (rest (new-gean-list 1)))&quot; &quot;(map Transfer-Rna (rest (new-gean-list 1)))&quot; &quot;(rest (new-gean-list 1))&quot; &quot;(str (rest (new-gean-list 1)))&quot; &quot;(apply str (rest (new-gean-list 1)))&quot; &quot;(use '[clojure.string :only (split)])&quot; &quot;(split (apply str (rest (new-gean-list 1))) #\&quot;:\&quot;)&quot; &quot;(rest (split (apply str (rest (new-gean-list 1))) #\&quot;:\&quot;))&quot; &quot;(map gen-gene (rest (split (apply str (rest (new-gean-list 1))) #\&quot;:\&quot;)))&quot; &quot;(map parse-int (rest (split (apply str (rest (new-gean-list 1))) #\&quot;:\&quot;)))&quot; &quot;(map gen-gene (map parse-int (rest (split (apply str (rest (new-gean-list 1))) #\&quot;:\&quot;))))&quot; &quot;(class gen-gene)&quot; &quot;(getDna (rest (new-gean-list 1)))&quot; &quot;(split gene-start #\&quot;:\&quot;)&quot; &quot;(rest (split gene-start #\&quot;:\&quot;))&quot; &quot;(let [gene (rest (new-gean-list 3))]\n  (map gen-gene\n       (map parse-int\n            (rest (split (apply str gene) #\&quot;:\&quot;)))))&quot; &quot;(let [gene (rest (new-gean-list 3))]\n  (concat\n    gene-start\n    (map gen-gene\n         (map parse-int\n              (rest (split (apply str gene) #\&quot;:\&quot;))))\n    gene-end\n    )\n  )&quot; &quot;(let [gene (rest (new-gean-list 3))]\n  (concat\n    '(:0000 :0000 :0000 :0000)\n    (map gen-gene\n         (map parse-int\n              (rest (split (apply str gene) #\&quot;:\&quot;))))\n    '(:1010 :0000 :1010 :0000)\n    )\n  )&quot; &quot;(let [gene (rest (new-gean-list 3))]\n    (map gen-gene\n         (map parse-int\n              (rest (split (apply str gene) #\&quot;:\&quot;))))\n  )&quot; &quot;(getDna (rest new-gean-list 3))&quot; &quot;(getDna (rest (new-gean-list 3)))&quot; &quot;(let [dna (getDna (rest (new-gean-list 3)))]\n  (for [x dna y '(:0000) z '(:11000011)]\n    [y x z]\n    )\n  )&quot; &quot;(let [dna (getDna (rest (new-gean-list 3)))]\n  (for [x dna y '(:0000) z '(:11000011)]\n    (flatten y x z)\n    )\n  )&quot; &quot;(let [dna (getDna (rest (new-gean-list 3)))]\n  (for [x dna y '(:0000) z '(:11000011)]\n    (flatten [y x z])\n    )\n  )&quot; &quot;(rand-gene)&quot; &quot;(let [dna (getDna (rest (new-gean-list 3)))]\n  (for [x dna y '(:0000) z '(:11000011)]\n    (flatten [y x z (rand-gene)])\n    )\n  )&quot; &quot;(str (flatten (let [dna (getDna (rest (new-gean-list 3)))]\n  (for [x dna y '(:0000) z '(:11000011)]\n    (flatten [y x z (rand-gene)])\n    )\n  )))&quot; &quot;(apply str (flatten (let [dna (getDna (rest (new-gean-list 3)))]\n  (for [x dna y '(:0000) z '(:11000011)]\n    (flatten [y x z (rand-gene)])\n    )\n  )))&quot; &quot;(flatten (let [dna (getDna (rest (new-gean-list 3)))]\n  (for [x dna y '(:0000) z '(:11000011)]\n    (flatten [y x z (rand-gene)])\n    )\n  ))&quot; &quot;(fullDna (rest (new-gean-list 5)))&quot; &quot;(let [a (new-gean-list 3)\n      x (first a)\n      y (rest a)]\n  (nlogo-translate-cmd\n    (concat\n      '(to-nlogo)\n      (list x)\n      (doall (map my-fun geans-list y))\n      )\n    )\n  )&quot; &quot;(fullDna (rest (new-gean-list 3)))&quot; &quot;gene-start&quot; &quot;gene-end&quot; &quot;(translate (new-gean-list 3))&quot; &quot;(crt-rabbits)&quot; &quot;(crt-rabbits 1)&quot; &quot;(crt-rabbits 5)&quot; &quot;(fmlogo (\&quot;asdf324r23 : 2£: 2£: 23: \&quot;))&quot; &quot;(fmlogo \&quot;1:1.9:138: dna :0000:0000:0000:0000:1111:0101:0101:0000:0101:0000:1111:1111:1111:1111:1101:0000:0000:0000:0000:1111:1111:1111:1111:1111:1111:1111:1111:1111:1111:0010:0101:0000:0101:0000:1111:1111:1111:1111:1111:1111:0001\&quot;)&quot; &quot;(nread-check (nlogo-str))&quot; &quot;(nread-check (str \&quot;helo\&quot;))&quot; &quot;(nread-check \&quot;asdfa\&quot;)&quot; &quot;(nread-check \&quot;stop\&quot;)&quot; &quot;(nread-check \&quot;st23423\&quot;)&quot; &quot;(nlogo-str \&quot;hello\&quot;)&quot; &quot;(nlogo-read)&quot; &quot;(nlogo-io-waiting)&quot; &quot;(startup 2222)&quot; &quot;(new-gean-list 2)&quot; &quot;(nread-check \&quot;hello\&quot;)&quot; &quot;asdf&quot; &quot;3&quot; &quot;(def a (to-array-2d [[1 2 3][4 5 6]]))&quot; &quot;(aget a 0)&quot; &quot;(aget a 0 0)&quot; &quot;(aget a 0 2)&quot; &quot;(aget a 1 0)&quot; &quot;(aget a 1 3)&quot; &quot;(aget a 1 2)&quot; &quot;(def a (to-array-2d [[8 10 12][4 5 6]]))&quot; &quot;(aget 0 1)&quot; &quot;(aget a 0 0 )&quot; &quot;(pprint (make-array Integer/TYPE 2 3))&quot; &quot;(pprint (make-array Integer/TYPE 3 3))&quot; &quot;(pprint (make-array Integer/TYPE 3 4))&quot; &quot;(pprint (make-array Integer/TYPE 4 4))&quot; &quot;(pprint (make-array Integer/TYPE 4 4 2))&quot; &quot;(def 4Da(make-array Integer/TYPE 4 4 2))&quot; &quot;(def 3(make-array Integer/TYPE 4 4 2))&quot; &quot;(def helo (make-array Integer/TYPE 4 4 2))&quot; &quot;helo&quot; &quot;(def 0 0 0)&quot; &quot;(aget helo 0 0 0 )&quot; &quot;(aget helo 0 0 1)&quot; &quot;(pprint helo)&quot; &quot;(inc helo)&quot; &quot;(first helo)&quot; &quot;(first (first helo))&quot; &quot;(+ (first (first helo)) 3)&quot; &quot;(str (first (first helo)) 3)&quot; &quot;(apply str (first (first helo)) 3)&quot; &quot;(apply list first (first helo)) 3)&quot;], :remote []}}</component>
</project>