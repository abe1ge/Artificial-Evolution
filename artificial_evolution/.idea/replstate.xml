<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459889432477">{:repl-history {:ide [], :local [&quot;(doall (map my-fun (rest (new-gean-list 3)) geans-list))&quot; &quot;(first geans-list)&quot; &quot;(class speed)&quot; &quot;(class (first geans-list))&quot; &quot;(rtn-speed :1010 speed)&quot; &quot;(rtn-speed (rest (new-gean-list 3)) geans-list)&quot; &quot;(def geans-list1 '(speed colour))&quot; &quot;(rtn-speed (rest (new-gean-list 3)) geans-list1)&quot; &quot;(translate (new-gean-list 3))&quot; &quot;(nlogo-send (translate (new-gean-list 3)))&quot; &quot;(creat-rabbits 30)&quot; &quot;(println (translate (new-gean-list x)))&quot; &quot;(println (translate (new-gean-list 1)))&quot; &quot;(println (translate (new-gean-list 3)))&quot; &quot;(crt-rabbits 23)&quot; &quot;(nlogo-send-exec 20)&quot; &quot;(str \&quot;finrepl \&quot; (- 20 1))&quot; &quot;(startup 2225)&quot; &quot;(nlogo-send \&quot;somehting\&quot;)&quot; &quot;(startup 2226)&quot; &quot;(nlogo-send \&quot;hello\&quot;)&quot; &quot;(startup 2224)&quot; &quot;(nlogo-send-exec 50)&quot; &quot;(nlogo-send-exec 100)&quot; &quot;(loop [x 100]\n  (when (&gt; x 0)\n    (nlogo-read)\n    (recur (- x 1))))&quot; &quot;(startup 2223)&quot; &quot;pop&quot; &quot;45w y45&quot; &quot;(sadf)&quot; &quot;(nlogo-read)&quot; &quot;VirtualMachineError&quot; &quot;oijp&quot; &quot;(nlogo-send-exec 10)&quot; &quot;(loop [x 10]\n  (when (&gt; x 1)\n    (println x)\n    (recur (- x 2))))&quot; &quot;(loop [x 10]\n  (when (&gt; x 1)\n    (println x)\n    (recur (- x 1))))&quot; &quot;(loop [x 10]\n  (when (&gt; x 1)\n    (println (Integer/toString x))\n    (recur (- x 1))))&quot; &quot;(loop [x 10]\n  (when (&gt; x 1)\n    (println (Integer/toString x 2))\n    (recur (- x 1))))&quot; &quot;(Integer/toString 19 2)&quot; &quot;(str-int \&quot;221312312\&quot;)&quot; &quot;(defn unary [num]\n  let x (loop [y num]\n          (when (&gt; y 1)\n            (concat x 1)\n            (recure (- y 1)))))&quot; &quot;(defn unary [num]\n  let x (loop [y num]\n          (when (&gt; y 1)\n            (concat x \&quot;1\&quot;)\n            (recure (- y 1)))))&quot; &quot;(defn unary [num]\n  let [x (loop [y num]\n          (when (&gt; y 1)\n            (concat x \&quot;1\&quot;)\n            (recure (- y 1))))])&quot; &quot;(concat 3 \&quot;3\&quot;)&quot; &quot;(concat \&quot;3\&quot; \&quot;4\&quot;)&quot; &quot;(defn unary [num]\n  let x (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) 1)\n            (recure (- y 1)))))&quot; &quot;(defn unary [num]\n  let [x (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) 1)\n            (recure (- y 1))))])&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n       (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) 1)\n            (recure (- y 1))))))&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n       (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) 1)\n            (recur (- y 1))))))&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n       (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) 1)\n            (recur (- y 1))))\n       x))&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n       (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) 1)\n            (recur (- y 1))))\n       ))&quot; &quot;(unary 5)&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n       (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) \&quot;1\&quot;)\n            (recur (- y 1))))\n       ))&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n       (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) \&quot;1\&quot;)\n            (recur (- y 1))))\n       x))&quot; &quot;(unary 4)&quot; &quot;()&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n    (concat x \&quot;1\&quot;)\n       x))&quot; &quot;(defn unary [num]\n  (let [x (concat \&quot;1\&quot; \&quot;1\&quot;)]\n       x))&quot; &quot;(unary 3)&quot; &quot;(defn unary [num]\n  (let [x (concat (loop [y num]\n                    (when (&gt; y num)\n                      x\n                      (recur (- y 1)))))]\n       x))&quot; &quot;(defn unary [num]\n  (let [x (concat (loop [y num]\n                    (when (&gt; y num)\n                      (str x)\n                      (recur (- y 1)))))]\n       x))&quot; &quot;(defn unary [num]\n  (let [x (concat (loop [y num]\n                    (when (&gt; y num)\n                      (concat (str x) \&quot;1\&quot;)\n                      (recur (- y 1)))))]\n       x))&quot; &quot;(defn unary [num]\n  (let [x (loop [y num]\n                    (when (&gt; y num)\n                      (concat (str x) \&quot;1\&quot;)\n                      (recur (- y 1))))]\n       x))&quot; &quot;(startup 2222)&quot; &quot;(nread-check (nlogo-str))&quot; &quot;(hash-map {:0101 2 :0202 2})&quot; &quot;(hash-map :key1 1, key2 2)&quot; &quot;(hash-map :key1 1, :key2 2)&quot; &quot;(merge speed {:22 2.1})&quot; &quot;(require '[clojure.string :as str])&quot; &quot;(str/split \&quot;q1w2e3r4t5y6u7i8o9p0\&quot; #\&quot;\\d+\&quot; 5)&quot; &quot;(str/split \&quot;3242342123123123\&quot; #\&quot;\\d+\&quot; 4)&quot; &quot;(str/split \&quot;3242342123123123\&quot; #\&quot;\\d+\&quot; 3)&quot; &quot;(str/split \&quot;3242342123123123\&quot; #\&quot;1\&quot; 3)&quot; &quot;(str/split \&quot;3242342123123123\&quot; #\&quot;1\&quot; 4)&quot; &quot;(subs \&quot;101010110101\&quot; 3 6)&quot; &quot;(subs \&quot;101010110101\&quot; 0 4 8)&quot; &quot;(subs \&quot;101010110101\&quot; 0 4 8 9)&quot; &quot;(subs \&quot;101010110101\&quot; 0 4)&quot; &quot;(defn reocur [agentdna]\n  (let [x 3]\n    (+ x 11))\n  )&quot; &quot;(reocur asdfa)&quot; &quot;(reocur )&quot; &quot;(reocur 2)&quot; &quot;(def mydna \&quot;1010100110101001\&quot;)&quot; &quot;(reocur mydna)&quot; &quot;(defn gen-gean [num ]\n  (def mygean1 \&quot;1 \&quot;)\n  (println mygean1)\n  (loop [x num]\n    (when (&gt; x 1)\n      (def mygean1\n        (str mygean1 (rand-int 2))\n        )\n      (recur (- x 1))))\n  )&quot; &quot;(gen-gean 50)&quot; &quot;(ns dna.gen)&quot; &quot;(gen-gean 3)&quot; &quot;(gen-gean 10)&quot; &quot;(mygean1)&quot; &quot;(str-int mygean1)&quot; &quot;mygean1&quot; &quot;(geans-list)&quot; &quot;geans-list&quot; &quot;(new-gean-list 1)&quot; &quot;(speed :19)&quot; &quot;(colour :150)&quot; &quot;(new-gean-str 3)&quot; &quot;(new-gean-str 5)&quot; &quot;(get-gene speed)&quot; &quot;(get-speed speed)&quot;], :remote []}}</component>
</project>