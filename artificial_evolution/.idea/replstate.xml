<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459931798020">{:repl-history {:ide [], :local [&quot;(defn unary [num]\n  let [x (loop [y num]\n          (when (&gt; y 1)\n            (concat x \&quot;1\&quot;)\n            (recure (- y 1))))])&quot; &quot;(concat 3 \&quot;3\&quot;)&quot; &quot;(concat \&quot;3\&quot; \&quot;4\&quot;)&quot; &quot;(defn unary [num]\n  let x (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) 1)\n            (recure (- y 1)))))&quot; &quot;(defn unary [num]\n  let [x (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) 1)\n            (recure (- y 1))))])&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n       (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) 1)\n            (recure (- y 1))))))&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n       (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) 1)\n            (recur (- y 1))))))&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n       (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) 1)\n            (recur (- y 1))))\n       x))&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n       (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) 1)\n            (recur (- y 1))))\n       ))&quot; &quot;(unary 5)&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n       (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) \&quot;1\&quot;)\n            (recur (- y 1))))\n       ))&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n       (loop [y num]\n          (when (&gt; y 1)\n            (concat (str x) \&quot;1\&quot;)\n            (recur (- y 1))))\n       x))&quot; &quot;(unary 4)&quot; &quot;()&quot; &quot;(defn unary [num]\n  (let [x \&quot;1\&quot;]\n    (concat x \&quot;1\&quot;)\n       x))&quot; &quot;(defn unary [num]\n  (let [x (concat \&quot;1\&quot; \&quot;1\&quot;)]\n       x))&quot; &quot;(unary 3)&quot; &quot;(defn unary [num]\n  (let [x (concat (loop [y num]\n                    (when (&gt; y num)\n                      x\n                      (recur (- y 1)))))]\n       x))&quot; &quot;(defn unary [num]\n  (let [x (concat (loop [y num]\n                    (when (&gt; y num)\n                      (str x)\n                      (recur (- y 1)))))]\n       x))&quot; &quot;(defn unary [num]\n  (let [x (concat (loop [y num]\n                    (when (&gt; y num)\n                      (concat (str x) \&quot;1\&quot;)\n                      (recur (- y 1)))))]\n       x))&quot; &quot;(defn unary [num]\n  (let [x (loop [y num]\n                    (when (&gt; y num)\n                      (concat (str x) \&quot;1\&quot;)\n                      (recur (- y 1))))]\n       x))&quot; &quot;(startup 2222)&quot; &quot;(nread-check (nlogo-str))&quot; &quot;(hash-map {:0101 2 :0202 2})&quot; &quot;(hash-map :key1 1, key2 2)&quot; &quot;(hash-map :key1 1, :key2 2)&quot; &quot;(merge speed {:22 2.1})&quot; &quot;(require '[clojure.string :as str])&quot; &quot;(str/split \&quot;q1w2e3r4t5y6u7i8o9p0\&quot; #\&quot;\\d+\&quot; 5)&quot; &quot;(str/split \&quot;3242342123123123\&quot; #\&quot;\\d+\&quot; 4)&quot; &quot;(str/split \&quot;3242342123123123\&quot; #\&quot;\\d+\&quot; 3)&quot; &quot;(str/split \&quot;3242342123123123\&quot; #\&quot;1\&quot; 3)&quot; &quot;(str/split \&quot;3242342123123123\&quot; #\&quot;1\&quot; 4)&quot; &quot;(subs \&quot;101010110101\&quot; 3 6)&quot; &quot;(subs \&quot;101010110101\&quot; 0 4 8)&quot; &quot;(subs \&quot;101010110101\&quot; 0 4 8 9)&quot; &quot;(subs \&quot;101010110101\&quot; 0 4)&quot; &quot;(defn reocur [agentdna]\n  (let [x 3]\n    (+ x 11))\n  )&quot; &quot;(reocur asdfa)&quot; &quot;(reocur )&quot; &quot;(reocur 2)&quot; &quot;(def mydna \&quot;1010100110101001\&quot;)&quot; &quot;(reocur mydna)&quot; &quot;(defn gen-gean [num ]\n  (def mygean1 \&quot;1 \&quot;)\n  (println mygean1)\n  (loop [x num]\n    (when (&gt; x 1)\n      (def mygean1\n        (str mygean1 (rand-int 2))\n        )\n      (recur (- x 1))))\n  )&quot; &quot;(gen-gean 50)&quot; &quot;(ns dna.gen)&quot; &quot;(gen-gean 3)&quot; &quot;(gen-gean 10)&quot; &quot;(mygean1)&quot; &quot;(str-int mygean1)&quot; &quot;mygean1&quot; &quot;(geans-list)&quot; &quot;(new-gean-list 1)&quot; &quot;(speed :19)&quot; &quot;(colour :150)&quot; &quot;(new-gean-str 3)&quot; &quot;(new-gean-str 5)&quot; &quot;(get-gene speed)&quot; &quot;(get-speed speed)&quot; &quot;(rand-key-multi colour speed)&quot; &quot;(rand-nth (keys speed))&quot; &quot;(list (rand-nth (keys speed)) (rand-nth (keys colour)))&quot; &quot;(rand-key-multi speed)&quot; &quot;(rand-key-multi speed colour)&quot; &quot;(rand-key1 speed)&quot; &quot;(doc rand-key1)&quot; &quot;(doc rand-key)&quot; &quot;(doc *)&quot; &quot;(rand-key speed)&quot; &quot;(rand-key speed colour)&quot; &quot;(rand-keyval speed)&quot; &quot;(rand-nth (speed))&quot; &quot;(rand-nth (vec speed))&quot; &quot;(rand-nth (val speed))&quot; &quot;(rand-nth (select-keys speed))&quot; &quot;(speed)&quot; &quot;speed&quot; &quot;(rand-nth speed)&quot; &quot;(rand-keyval speed colour)&quot; &quot;(first (rand-keyval speed colour))&quot; &quot;(second (rand-keyval speed colour))&quot; &quot;(rest (rand-keyval speed colour))&quot; &quot;(last (rand-keyval speed colour))&quot; &quot;(list (rand-nth (keys map))\n      (rand-nth (keys map2))\n      (rand-nth (keys map3)))&quot; &quot;(list (rand-nth (keys speed))\n      (rand-nth (keys colour)))&quot; &quot;(str (rand-nth (keys speed))\n      (rand-nth (keys colour)))&quot; &quot;(str (rand-nth (keys colour)))&quot; &quot;(rand-key list speed colour)&quot; &quot;(rand-key str speed colour)&quot; &quot;(str (rand-key str speed colour) (rand-key str speed colour))&quot; &quot;(list (rand-key str speed colour) (rand-key str speed colour))&quot; &quot;(list (rand-key list speed colour) (rand-key list speed colour))&quot; &quot;(cond (rand-key list speed colour) (rand-key list speed colour))&quot; &quot;(concat (rand-key list speed colour) (rand-key list speed colour))&quot; &quot;(find-gene)&quot; &quot;(str (rand-key list speed))&quot; &quot;(Integer. (re-find  #\&quot;\\d+\&quot; \&quot;:3 :4\&quot; ))&quot; &quot;(rand-key list speed)&quot; &quot;(key-int speed)&quot; &quot;geans-list&quot; &quot;(rand-key list geans-list)&quot;], :remote []}}</component>
</project>